// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// # UpdateResourceInfo Object
// ### Description
// The `UpdateResourceInfo` object is used as an input to the UpdateResource API.
type UpdateResourceInfo struct {
	// The ID of the owner of the resource.
	AdminOwnerID *string `json:"admin_owner_id,omitempty"`
	// The ID of the associated configuration template.
	ConfigurationTemplateID *string `json:"configuration_template_id,omitempty"`
	// A description of the resource.
	Description *string `json:"description,omitempty"`
	// The ID of the resource.
	ID *string `json:"resource_id,omitempty"`
	// The name of the resource.
	Name *string `json:"name,omitempty"`
	// # CreateRequestConfigurationInfoList Object
	// ### Description
	// The `CreateRequestConfigurationInfoList` object is used as an input to the CreateRequestConfigurations API.
	//
	// ### Formatting Requirements
	// The `CreateRequestConfigurationInfoList` object must contain a list of `RequestConfiguration` objects.
	// Exactly one default `RequestConfiguration` must be provided.  A default `RequestConfiguration` is one with a `condition` of `null`
	// and a `priority` of `0`.  The default `RequestConfiguration` will be used when no other `RequestConfiguration` matches the request.
	//
	// Only one `RequestConfiguration` may be provided for each priority, and the priorities must be contiguous.  For example, if there are
	// two `RequestConfigurations` with priorities 0 and 2, there must be a `RequestConfiguration` with priority 1.
	//
	// To use the `condition` field, the `condition` must be a valid JSON object.
	//
	// The `condition` must be a JSON object with the key `group_ids` (more options may be added in the future), whose value is a list of
	// group IDs.
	// The `condition` will match if the user requesting access is a member of any of the groups in the list. Currently, we only support
	// using a single group as a condition.
	RequestConfigurationList *CreateRequestConfigurationInfoList `json:"request_configuration_list,omitempty"`
	// A list of configurations for requests to this resource. If not provided, the default request configuration will be used.
	RequestConfigurations []RequestConfiguration `json:"request_configurations,omitempty"`
	// A bool representing whether or not to require MFA for reviewers to approve requests for this resource.
	RequireMfaToApprove *bool `json:"require_mfa_to_approve,omitempty"`
	// A bool representing whether or not to require MFA to connect to this resource.
	RequireMfaToConnect *bool `json:"require_mfa_to_connect,omitempty"`
}

func (o *UpdateResourceInfo) GetAdminOwnerID() *string {
	if o == nil {
		return nil
	}
	return o.AdminOwnerID
}

func (o *UpdateResourceInfo) GetConfigurationTemplateID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationTemplateID
}

func (o *UpdateResourceInfo) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpdateResourceInfo) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UpdateResourceInfo) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpdateResourceInfo) GetRequestConfigurationList() *CreateRequestConfigurationInfoList {
	if o == nil {
		return nil
	}
	return o.RequestConfigurationList
}

func (o *UpdateResourceInfo) GetRequestConfigurations() []RequestConfiguration {
	if o == nil {
		return nil
	}
	return o.RequestConfigurations
}

func (o *UpdateResourceInfo) GetRequireMfaToApprove() *bool {
	if o == nil {
		return nil
	}
	return o.RequireMfaToApprove
}

func (o *UpdateResourceInfo) GetRequireMfaToConnect() *bool {
	if o == nil {
		return nil
	}
	return o.RequireMfaToConnect
}
