// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	speakeasy_stringplanmodifier "github.com/opal-dev/terraform-provider-opal/internal/planmodifiers/stringplanmodifier"
	tfTypes "github.com/opal-dev/terraform-provider-opal/internal/provider/types"
	"github.com/opal-dev/terraform-provider-opal/internal/sdk"
	"github.com/opal-dev/terraform-provider-opal/internal/sdk/models/operations"
	"github.com/opal-dev/terraform-provider-opal/internal/validators"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &ResourcesUsersResource{}
var _ resource.ResourceWithImportState = &ResourcesUsersResource{}

func NewResourcesUsersResource() resource.Resource {
	return &ResourcesUsersResource{}
}

// ResourcesUsersResource defines the resource implementation.
type ResourcesUsersResource struct {
	client *sdk.OpalAPI
}

// ResourcesUsersResourceModel describes the resource data model.
type ResourcesUsersResourceModel struct {
	AccessLevel         tfTypes.ResourceAccessLevel `tfsdk:"access_level"`
	AccessLevelRemoteID types.String                `tfsdk:"access_level_remote_id"`
	DurationMinutes     types.Int64                 `tfsdk:"duration_minutes"`
	Email               types.String                `tfsdk:"email"`
	ExpirationDate      types.String                `tfsdk:"expiration_date"`
	FullName            types.String                `tfsdk:"full_name"`
	ResourceID          types.String                `tfsdk:"resource_id"`
	UserID              types.String                `tfsdk:"user_id"`
}

func (r *ResourcesUsersResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_resources_users"
}

func (r *ResourcesUsersResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "ResourcesUsers Resource",

		Attributes: map[string]schema.Attribute{
			"access_level": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"access_level_name": schema.StringAttribute{
						Computed:    true,
						Description: `The human-readable name of the access level.`,
					},
					"access_level_remote_id": schema.StringAttribute{
						Computed:    true,
						Description: `The machine-readable identifier of the access level.`,
					},
				},
				MarkdownDescription: `# Access Level Object` + "\n" +
					`### Description` + "\n" +
					`The ` + "`" + `ResourceAccessLevel` + "`" + ` object is used to represent the level of access that a user has to a resource or a resource has to a group. The "default" access` + "\n" +
					`level is a ` + "`" + `ResourceAccessLevel` + "`" + ` object whose fields are all empty strings.` + "\n" +
					`` + "\n" +
					`### Usage Example` + "\n" +
					`View the ` + "`" + `ResourceAccessLevel` + "`" + ` of a resource/user or resource/group pair to see the level of access granted to the resource.`,
			},
			"access_level_remote_id": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional:    true,
				Description: `The remote ID of the access level to grant to this user. If omitted, the default access level remote ID value (empty string) is used. Requires replacement if changed. `,
			},
			"duration_minutes": schema.Int64Attribute{
				PlanModifiers: []planmodifier.Int64{
					int64planmodifier.RequiresReplaceIfConfigured(),
				},
				Required:    true,
				Description: `The duration for which the resource can be accessed (in minutes). Use 0 to set to indefinite. Requires replacement if changed. `,
			},
			"email": schema.StringAttribute{
				Computed:    true,
				Description: `The user's email.`,
			},
			"expiration_date": schema.StringAttribute{
				Computed:    true,
				Description: `The day and time the user's access will expire.`,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"full_name": schema.StringAttribute{
				Computed:    true,
				Description: `The user's full name.`,
			},
			"resource_id": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Required:    true,
				Description: `The ID of the resource. Requires replacement if changed. `,
			},
			"user_id": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Required:    true,
				Description: `The ID of the user to add. Requires replacement if changed. `,
			},
		},
	}
}

func (r *ResourcesUsersResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.OpalAPI)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.OpalAPI, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *ResourcesUsersResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *ResourcesUsersResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	requestBody := *data.ToOperationsCreateResourceUsersRequestBody()
	accessLevelRemoteID := new(string)
	if !data.AccessLevelRemoteID.IsUnknown() && !data.AccessLevelRemoteID.IsNull() {
		*accessLevelRemoteID = data.AccessLevelRemoteID.ValueString()
	} else {
		accessLevelRemoteID = nil
	}
	resourceID := data.ResourceID.ValueString()
	userID := data.UserID.ValueString()
	request := operations.CreateResourceUsersRequest{
		RequestBody:         requestBody,
		AccessLevelRemoteID: accessLevelRemoteID,
		ResourceID:          resourceID,
		UserID:              userID,
	}
	res, err := r.client.Resources.CreateUsers(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.ResourceUser == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedResourceUser(res.ResourceUser)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ResourcesUsersResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *ResourcesUsersResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; we rely entirely on CREATE API request response

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ResourcesUsersResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *ResourcesUsersResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; all attributes marked as RequiresReplace

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ResourcesUsersResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *ResourcesUsersResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	accessLevelRemoteID := new(string)
	if !data.AccessLevelRemoteID.IsUnknown() && !data.AccessLevelRemoteID.IsNull() {
		*accessLevelRemoteID = data.AccessLevelRemoteID.ValueString()
	} else {
		accessLevelRemoteID = nil
	}
	resourceID := data.ResourceID.ValueString()
	userID := data.UserID.ValueString()
	request := operations.DeleteResourceUsersRequest{
		AccessLevelRemoteID: accessLevelRemoteID,
		ResourceID:          resourceID,
		UserID:              userID,
	}
	res, err := r.client.Resources.DeleteUsers(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *ResourcesUsersResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.AddError("Not Implemented", "No available import state operation is available for resource resources_users.")
}
