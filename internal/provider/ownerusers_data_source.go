// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/opalsecurity/terraform-provider-opal/internal/provider/types"
	"github.com/opalsecurity/terraform-provider-opal/internal/sdk"
	"github.com/opalsecurity/terraform-provider-opal/internal/sdk/models/operations"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &OwnerUsersDataSource{}
var _ datasource.DataSourceWithConfigure = &OwnerUsersDataSource{}

func NewOwnerUsersDataSource() datasource.DataSource {
	return &OwnerUsersDataSource{}
}

// OwnerUsersDataSource is the data source implementation.
type OwnerUsersDataSource struct {
	client *sdk.OpalAPI
}

// OwnerUsersDataSourceModel describes the data model.
type OwnerUsersDataSourceModel struct {
	OwnerID types.String   `tfsdk:"owner_id"`
	Users   []tfTypes.User `tfsdk:"users"`
}

// Metadata returns the data source type name.
func (r *OwnerUsersDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_owner_users"
}

// Schema defines the schema for the data source.
func (r *OwnerUsersDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "OwnerUsers DataSource",

		Attributes: map[string]schema.Attribute{
			"owner_id": schema.StringAttribute{
				Required:    true,
				Description: `The ID of the owner.`,
			},
			"users": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"email": schema.StringAttribute{
							Computed:    true,
							Description: `The email of the user.`,
						},
						"first_name": schema.StringAttribute{
							Computed:    true,
							Description: `The first name of the user.`,
						},
						"hr_idp_status": schema.StringAttribute{
							Computed:    true,
							Description: `User status pulled from an HR/IDP provider. must be one of ["ACTIVE", "SUSPENDED", "DEPROVISIONED", "DELETED", "NOT_FOUND"]`,
						},
						"id": schema.StringAttribute{
							Computed:    true,
							Description: `The ID of the user.`,
						},
						"last_name": schema.StringAttribute{
							Computed:    true,
							Description: `The last name of the user.`,
						},
						"name": schema.StringAttribute{
							Computed:    true,
							Description: `The full name of the user.`,
						},
						"position": schema.StringAttribute{
							Computed:    true,
							Description: `The user's position.`,
						},
					},
				},
			},
		},
	}
}

func (r *OwnerUsersDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.OpalAPI)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.OpalAPI, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *OwnerUsersDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *OwnerUsersDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	ownerID := data.OwnerID.ValueString()
	request := operations.GetOwnerUsersRequest{
		OwnerID: ownerID,
	}
	res, err := r.client.Owners.GetUsers(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.UserList == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedUserList(res.UserList)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
