// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/opalsecurity/terraform-provider-opal/internal/sdk"
	"github.com/opalsecurity/terraform-provider-opal/internal/sdk/models/operations"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &GroupDataSource{}
var _ datasource.DataSourceWithConfigure = &GroupDataSource{}

func NewGroupDataSource() datasource.DataSource {
	return &GroupDataSource{}
}

// GroupDataSource is the data source implementation.
type GroupDataSource struct {
	client *sdk.OpalAPI
}

// GroupDataSourceModel describes the data model.
type GroupDataSourceModel struct {
	ID                 types.String   `tfsdk:"id"`
	Visibility         types.String   `tfsdk:"visibility"`
	VisibilityGroupIds []types.String `tfsdk:"visibility_group_ids"`
}

// Metadata returns the data source type name.
func (r *GroupDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_group"
}

// Schema defines the schema for the data source.
func (r *GroupDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Group DataSource",

		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Required:    true,
				Description: `The ID of the group.`,
			},
			"visibility": schema.StringAttribute{
				Computed:    true,
				Description: `The visibility level of the entity. must be one of ["GLOBAL", "LIMITED"]`,
			},
			"visibility_group_ids": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
			},
		},
	}
}

func (r *GroupDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.OpalAPI)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.OpalAPI, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *GroupDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *GroupDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	id := data.ID.ValueString()
	request := operations.GetGroupRequest{
		ID: id,
	}
	res, err := r.client.Groups.GetGroup(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.Group == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedGroup(res.Group)
	id1 := data.ID.ValueString()
	request1 := operations.GetGroupMessageChannelsRequest{
		ID: id1,
	}
	res1, err := r.client.Groups.GetMessageChannels(ctx, request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if res1.Object == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res1.RawResponse))
		return
	}
	data.RefreshFromOperationsGetGroupMessageChannelsResponseBody(res1.Object)
	id2 := data.ID.ValueString()
	request2 := operations.GetGroupOnCallSchedulesRequest{
		ID: id2,
	}
	res2, err := r.client.Groups.GetOnCallSchedule(ctx, request2)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res2 != nil && res2.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res2.RawResponse))
		}
		return
	}
	if res2 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res2))
		return
	}
	if res2.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res2.StatusCode), debugResponse(res2.RawResponse))
		return
	}
	if res2.Object == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res2.RawResponse))
		return
	}
	id3 := data.ID.ValueString()
	request3 := operations.GetGroupVisibilityRequest{
		ID: id3,
	}
	res3, err := r.client.Groups.GetVisibility(ctx, request3)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res3 != nil && res3.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res3.RawResponse))
		}
		return
	}
	if res3 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res3))
		return
	}
	if res3.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res3.StatusCode), debugResponse(res3.RawResponse))
		return
	}
	if res3.Object == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res3.RawResponse))
		return
	}
	data.RefreshFromOperationsGetGroupVisibilityResponseBody(res3.Object)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
